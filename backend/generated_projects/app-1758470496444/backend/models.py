from pydantic import BaseModel, Field
from typing import Optional
from datetime import datetime

"""
Pydantic Models for the Todo Application

These models define the data structure and validation rules for the API.
FastAPI uses these models for:
1.  Request Body Validation: Automatically validates incoming JSON data.
2.  Response Serialization: Converts application objects into JSON responses.
3.  API Documentation: Generates schemas for Swagger UI and ReDoc.
"""

class TaskBase(BaseModel):
    """
    Base model for a task, containing common fields.
    This model is not used directly but is inherited by other models.
    """
    title: str = Field(..., min_length=1, max_length=100, description="The title of the task.")
    description: Optional[str] = Field(None, max_length=500, description="An optional detailed description of the task.")
    completed: bool = Field(default=False, description="Indicates whether the task is completed.")

class TaskCreate(TaskBase):
    """
    Model for creating a new task.
    Inherits all fields from TaskBase. This is the model the client sends in a POST request.
    No `id` or `created_at` fields are included, as they are generated by the server.
    """
    pass

class TaskUpdate(BaseModel):
    """
    Model for updating an existing task.
    All fields are optional, allowing for partial updates (PATCH-like behavior with PUT).
    The client only needs to send the fields they wish to change.
    """
    title: Optional[str] = Field(None, min_length=1, max_length=100, description="The new title of the task.")
    description: Optional[str] = Field(None, max_length=500, description="The new description of the task.")
    completed: Optional[bool] = Field(None, description="The new completion status of the task.")

class Task(TaskBase):
    """
    The full task model, representing a task as it is stored in the database.
    This model is used as the response model for API endpoints.
    It includes server-generated fields like `id` and `created_at`.
    """
    id: int = Field(..., description="The unique identifier for the task.")
    created_at: datetime = Field(..., description="The timestamp when the task was created.")

    class Config:
        # This allows Pydantic to work with ORM models, though not strictly
        # necessary for our in-memory DB, it's a good practice.
        from_attributes = True