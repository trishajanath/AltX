from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, EmailStr, HttpUrl


# =============================================================================
# Project Models
# =============================================================================

class ProjectBase(BaseModel):
    """
    Base model for a Project, containing shared properties.
    """
    title: str
    description: str
    imageUrl: HttpUrl
    projectUrl: HttpUrl
    tags: List[str] = []


class ProjectCreate(ProjectBase):
    """
    Model for creating a new Project. Inherits all fields from ProjectBase.
    These are the properties required in the request body for a POST request.
    """
    pass


class ProjectUpdate(BaseModel):
    """
    Model for updating an existing Project. All fields are optional.
    These are the properties that can be provided in the request body for a PUT/PATCH request.
    """
    title: Optional[str] = None
    description: Optional[str] = None
    imageUrl: Optional[HttpUrl] = None
    projectUrl: Optional[HttpUrl] = None
    tags: Optional[List[str]] = None


class Project(ProjectBase):
    """
    Model for representing a Project in the API response.
    Includes fields that are generated by the database (like 'id').
    The ConfigDict enables ORM mode, allowing the model to be populated from ORM objects.
    """
    id: int

    # Pydantic V2 config for ORM mode
    model_config = ConfigDict(from_attributes=True)


# =============================================================================
# Message Models
# =============================================================================

class MessageBase(BaseModel):
    """
    Base model for a Message, containing shared properties.
    """
    name: str
    email: EmailStr
    message: str


class MessageCreate(MessageBase):
    """
    Model for creating a new Message. Inherits all fields from MessageBase.
    These are the properties required in the request body for a POST request.
    """
    pass


class Message(MessageBase):
    """
    Model for representing a Message in the API response.
    Includes fields that are generated by the database (like 'id' and 'createdAt').
    The ConfigDict enables ORM mode.
    """
    id: int
    createdAt: datetime

    # Pydantic V2 config for ORM mode
    model_config = ConfigDict(from_attributes=True)

# Note: An 'Update' model for Message is omitted as messages are typically
# immutable once created. If partial updates were required, a MessageUpdate
# model similar to ProjectUpdate would be created.