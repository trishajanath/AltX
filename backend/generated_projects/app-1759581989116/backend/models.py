from datetime import datetime
from typing import Optional

from pydantic import BaseModel, ConfigDict, EmailStr, Field


# 1. Base Model: Defines the common attributes for a Message.
# This model is not used directly but is inherited by other models.
class MessageBase(BaseModel):
    """
    Base Pydantic model for a Message.

    Contains shared fields for creating, updating, and reading messages.
    """
    name: str = Field(
        ...,
        min_length=2,
        max_length=100,
        description="The name of the person sending the message.",
        examples=["John Doe"]
    )
    email: EmailStr = Field(
        ...,
        description="The email address of the sender.",
        examples=["john.doe@example.com"]
    )
    message_body: str = Field(
        ...,
        min_length=10,
        max_length=2000,
        description="The content of the message.",
        examples=["This is a test message."]
    )

    # Pydantic V2 configuration. 'from_attributes=True' allows the model
    # to be created from ORM objects (e.g., SQLAlchemy models).
    model_config = ConfigDict(from_attributes=True)


# 2. Create Model: Used for creating a new Message.
# Inherits all fields from MessageBase, as they are all required for creation.
class MessageCreate(MessageBase):
    """
    Pydantic model for creating a new Message.

    Used for request body validation in a POST endpoint.
    """
    pass


# 3. Update Model: Used for updating an existing Message.
# All fields are optional, allowing for partial updates (PATCH requests).
class MessageUpdate(BaseModel):
    """
    Pydantic model for updating an existing Message.

    All fields are optional. Used for request body validation in a PATCH endpoint.
    """
    name: Optional[str] = Field(
        None,
        min_length=2,
        max_length=100,
        description="The new name of the person sending the message.",
        examples=["Jane Doe"]
    )
    email: Optional[EmailStr] = Field(
        None,
        description="The new email address of the sender.",
        examples=["jane.doe@example.com"]
    )
    message_body: Optional[str] = Field(
        None,
        min_length=10,
        max_length=2000,
        description="The new content of the message.",
        examples=["This is an updated test message."]
    )


# 4. Response Model: Defines the structure of a Message returned by the API.
# This model includes fields that are generated by the server, like 'id' and 'timestamp'.
class Message(MessageBase):
    """
    Pydantic model for representing a Message in API responses.

    Includes server-generated fields like 'id' and 'timestamp'.
    """
    id: int = Field(
        ...,
        description="The unique identifier for the message.",
        examples=[1]
    )
    timestamp: datetime = Field(
        ...,
        description="The UTC timestamp when the message was created.",
        examples=["2023-10-27T10:00:00Z"]
    )