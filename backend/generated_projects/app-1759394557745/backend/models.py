from pydantic import BaseModel, ConfigDict

# -------------------
# Todo Models
# -------------------

# Base model with shared attributes
class TodoBase(BaseModel):
    """
    Base Pydantic model for a Todo item.
    Contains fields shared across creation and response.
    """
    title: str
    completed: bool = False


# Model for creating a new Todo item (used in POST requests)
class TodoCreate(TodoBase):
    """
    Model for creating a new Todo. Inherits all fields from TodoBase.
    This is the expected shape of the request body.
    """
    pass


# Model for updating an existing Todo item (used in PATCH requests)
# All fields are optional.
class TodoUpdate(BaseModel):
    """
    Model for updating a Todo. All fields are optional to allow
    for partial updates (PATCH).
    """
    title: str | None = None
    completed: bool | None = None


# Model for representing a Todo item in API responses (used in GET requests)
# This includes fields that are generated by the database, like 'id'.
class TodoResponse(TodoBase):
    """
    Model for API responses. Includes database-generated fields like 'id'.
    Inherits 'title' and 'completed' from TodoBase.
    """
    id: int

    # Pydantic v2 configuration to enable ORM mode.
    # This allows the model to be created from a SQLAlchemy model instance.
    model_config = ConfigDict(from_attributes=True)